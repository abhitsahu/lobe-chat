---
description: Development workflow and best practices for LobeChat
alwaysApply: true
---

# üîÑ LobeChat Development Workflow

## üìã Development Process

### 1. Feature Development
```bash
# 1. Create feature branch
git checkout -b feature/your-feature-name

# 2. Start development server
pnpm dev

# 3. Make changes and test
# 4. Run tests
pnpm test

# 5. Type check
pnpm type-check

# 6. Lint and fix
pnpm lint
```

### 2. Code Quality Checks
```bash
# Run all quality checks
pnpm lint

# Individual checks
pnpm lint:ts          # TypeScript linting
pnpm lint:style       # CSS/SCSS linting
pnpm lint:md          # Markdown linting
pnpm type-check       # TypeScript checking
```

### 3. Testing Workflow
```bash
# Run all tests
pnpm test

# Run specific test file
pnpm test src/features/YourFeature/__tests__/YourComponent.test.tsx

# Run with coverage
pnpm test:coverage

# Update snapshots
pnpm test:update
```

## üèóÔ∏è Architecture Patterns

### Component Development
1. **Create component file**: `YourComponent.tsx`
2. **Add TypeScript types**: Define props interface
3. **Implement component**: Use hooks and state
4. **Add styling**: Use `antd-style` or CSS modules
5. **Write tests**: Component and integration tests
6. **Add documentation**: JSDoc comments

### Store Development
1. **Define types**: `YourFeatureState` interface
2. **Create initial state**: Default values
3. **Implement actions**: State mutations
4. **Add selectors**: Data accessors
5. **Write tests**: Store behavior tests

### API Development
1. **Define schema**: Zod validation schemas
2. **Create router**: TRPC router
3. **Implement handlers**: Business logic
4. **Add types**: TypeScript definitions
5. **Write tests**: API endpoint tests

## üìÅ File Organization

### Feature Structure
```
src/features/YourFeature/
‚îú‚îÄ‚îÄ index.ts                    # Public exports
‚îú‚îÄ‚îÄ components/                 # UI components
‚îÇ   ‚îú‚îÄ‚îÄ YourComponent.tsx
‚îÇ   ‚îú‚îÄ‚îÄ YourComponent.test.tsx
‚îÇ   ‚îî‚îÄ‚îÄ YourComponent.stories.tsx
‚îú‚îÄ‚îÄ store/                      # State management
‚îÇ   ‚îú‚îÄ‚îÄ index.ts
‚îÇ   ‚îú‚îÄ‚îÄ initialState.ts
‚îÇ   ‚îú‚îÄ‚îÄ selectors.ts
‚îÇ   ‚îú‚îÄ‚îÄ actions.ts
‚îÇ   ‚îî‚îÄ‚îÄ __tests__/
‚îú‚îÄ‚îÄ hooks/                      # Custom hooks
‚îÇ   ‚îî‚îÄ‚îÄ useYourFeature.ts
‚îú‚îÄ‚îÄ utils/                      # Utility functions
‚îÇ   ‚îî‚îÄ‚îÄ helpers.ts
‚îú‚îÄ‚îÄ types.ts                    # Type definitions
‚îú‚îÄ‚îÄ constants.ts                # Feature constants
‚îî‚îÄ‚îÄ __tests__/                  # Integration tests
    ‚îî‚îÄ‚îÄ YourFeature.test.tsx
```

### Store Structure
```
src/store/yourFeature/
‚îú‚îÄ‚îÄ index.ts                    # Store exports
‚îú‚îÄ‚îÄ initialState.ts             # Initial state
‚îú‚îÄ‚îÄ selectors.ts                # Data selectors
‚îú‚îÄ‚îÄ actions.ts                  # Action creators
‚îú‚îÄ‚îÄ slices/                     # Feature slices
‚îÇ   ‚îú‚îÄ‚îÄ data/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ index.ts
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ actions.ts
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ selectors.ts
‚îÇ   ‚îî‚îÄ‚îÄ ui/
‚îÇ       ‚îú‚îÄ‚îÄ index.ts
‚îÇ       ‚îú‚îÄ‚îÄ actions.ts
‚îÇ       ‚îî‚îÄ‚îÄ selectors.ts
‚îî‚îÄ‚îÄ __tests__/                  # Store tests
    ‚îî‚îÄ‚îÄ yourFeature.test.ts
```

## üß™ Testing Strategy

### Unit Tests
- **Components**: Test rendering and behavior
- **Hooks**: Test state and side effects
- **Utils**: Test pure functions
- **Stores**: Test state mutations

### Integration Tests
- **API endpoints**: Test full request/response cycle
- **Feature workflows**: Test complete user flows
- **Database operations**: Test data persistence

### Test Structure
```typescript
// Component test
describe('YourComponent', () => {
  beforeEach(() => {
    // Setup
  });

  it('renders correctly', () => {
    render(<YourComponent />);
    expect(screen.getByText('Expected Text')).toBeInTheDocument();
  });

  it('handles user interaction', () => {
    render(<YourComponent />);
    fireEvent.click(screen.getByRole('button'));
    expect(mockFunction).toHaveBeenCalled();
  });
});
```

## üîß Development Tools

### VS Code Extensions
- **TypeScript**: Built-in support
- **ESLint**: Code linting
- **Prettier**: Code formatting
- **Tailwind CSS**: CSS support
- **GitLens**: Git integration

### Debugging
```typescript
// Debug logging
import { debug } from 'debug';

const log = debug('lobe-chat:your-feature');

// Usage
log('Debug message', { data });
```

### Performance Monitoring
```typescript
// React DevTools Profiler
import { Profiler } from 'react';

<Profiler id="YourComponent" onRender={onRenderCallback}>
  <YourComponent />
</Profiler>
```

## üìù Code Standards

### TypeScript
- **Strict mode**: Always enabled
- **Type definitions**: Explicit types for all functions
- **Interfaces**: Use interfaces over types for objects
- **Generics**: Use generics for reusable components

### React
- **Functional components**: Use hooks, not class components
- **Custom hooks**: Extract reusable logic
- **Memoization**: Use `useMemo` and `useCallback` appropriately
- **Error boundaries**: Handle errors gracefully

### Styling
- **CSS-in-JS**: Use `antd-style` for styling
- **Theme**: Use design tokens from theme
- **Responsive**: Mobile-first approach
- **Accessibility**: Follow WCAG guidelines

## üöÄ Deployment

### Environment Setup
```bash
# Production build
pnpm build

# Start production server
pnpm start

# Docker build
docker build -t lobe-chat .

# Docker run
docker run -p 3000:3000 lobe-chat
```

### Environment Variables
```bash
# Required
OPENAI_API_KEY=sk-your-key
DATABASE_URL=postgresql://...

# Optional
NEXTAUTH_SECRET=your-secret
NEXTAUTH_URL=https://your-domain.com
```

## üîç Code Review Process

### Before Submitting
1. **Run tests**: `pnpm test`
2. **Type check**: `pnpm type-check`
3. **Lint code**: `pnpm lint`
4. **Build check**: `pnpm build`

### Review Checklist
- [ ] Code follows project patterns
- [ ] Tests are included and passing
- [ ] TypeScript types are correct
- [ ] Performance considerations addressed
- [ ] Accessibility requirements met
- [ ] Documentation updated if needed

## üìö Resources

### Documentation
- **Main Guide**: `LOBECHAT_COMPREHENSIVE_GUIDE.md`
- **API Docs**: `src/server/` directory
- **Component Library**: `@lobehub/ui` package

### External Resources
- **Next.js**: https://nextjs.org/docs
- **React**: https://react.dev
- **TypeScript**: https://www.typescriptlang.org/docs
- **Zustand**: https://zustand-demo.pmnd.rs
- **Ant Design**: https://ant.design

---

*This workflow ensures consistent, high-quality development practices across the LobeChat project.*